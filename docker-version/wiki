#!/usr/bin/env python3.7
"""
Description:
    aureme launcher from /bin
    To create a new run from the aureme default pipeline use the first usage.
    To get a sample from the aureme default pipeline use the second usage.

::
    
    usage:
    	wiki --info [--cmd=STR]
    	wiki --init=ID [--host=STR]
    	wiki --id=ID --update=DIR [--api_url=STR] [--username=STR] [--password=STR]
    	wiki --id=ID --clean
    	wiki --id=ID --remove
    	wiki --all
    
    options:
    	-h --help    Show help.
    	--id=ID    identifier of the new wiki to initialize.
    	--wiki=ID    identifier of the wiki.
    	--update=DIR    folder containing wiki pages.
    	--api_url=STR    url of the wiki api, default is: 127.0.0.1:88/wiki_id/api.php.
    	--username=STR    username of the admin account [default: admin].
    	--password=STR    password of the admin account [default: default_pwd].

"""
try:
    import docopt
except ImportError:
    print("package docopt needed, use this cmd:\n pip install "
          + "docopt")
    exit()
import os
import subprocess
import shutil
import configparser


def set_var():
    global db_host, db_host, db_name, db_user, db_pwd, \
    wiki_host, default_wiki_username, default_wiki_password, \
    wiki_folders, wiki_template, db_alias

    #config_file_path = "/home/maite/Aureme_project/wiki-metabolic-network/docker-version/wiki_config.txt"
    config_file_path = "/home/wiki_config.txt"

    config = configparser.ConfigParser()
    config.read(config_file_path)
    #[MYSQL_VAR]
    db_host = config.get('MYSQL_VAR','db_host')
    db_name = config.get('MYSQL_VAR','db_name')
    db_user = config.get('MYSQL_VAR','db_user')
    db_pwd = config.get('MYSQL_VAR','db_pwd')
    #[MEDIAWIKI_VAR]
    wiki_host = config.get('MEDIAWIKI_VAR','wiki_host')
    default_wiki_username =  config.get('MEDIAWIKI_VAR','default_wiki_username')
    default_wiki_password = config.get('MEDIAWIKI_VAR','default_wiki_password')
    #[PATHS]
    wiki_folders = config.get('PATHS','wiki_folders')
    wiki_template = config.get('PATHS','wiki_template')

    db_alias = f'mysql --host={db_host} --user={db_user} --password={db_pwd}'
   

def main():
    set_var()
    args = docopt.docopt(__doc__)
    #check if db wiki_db exist, if no create it
    #DB is an alias for 'mysql --user ... --admin ...'
    try:
        cmd = f'{db_alias} -e "show databases" -s | egrep {db_name}'
        out = subprocess.check_output(["/bin/bash", "-i", "-c", cmd])
    except subprocess.CalledProcessError:
        print(f'Init, creating database {db_name}')
        cmd = f'{db_alias} -e "create database "{db_name}"'
        subprocess.call(["/bin/bash", "-i", "-c", cmd])

    if args["--init"]:
        wiki_id = args["--init"]
        wiki_path = os.path.join(wiki_folders, wiki_id)
        print(f'Checking wiki id {wiki_id}...')
        if os.path.exists(wiki_path):
            raise ValueError(f'A wiki with the id {wiki_id} already exist, remove it or change the new wiki id')
        print(f'Checking wiki id {wiki_id}: OK')
        print(f'Checking if the prefix {wiki_id}_ is already used in the database...')
        try:
            cmd = f'{db_alias} -D {db_name} -e "show tables" -s | egrep "^{wiki_id}_"'
            out = subprocess.check_output(["/bin/bash", "-i", "-c", cmd])
            raise ValueError("%s tables found with prefix %s_, a wiki is already using this prefix." %(out.count("\n"), wiki_id))
        except subprocess.CalledProcessError:
            print('Checking the if the prefix {wiki_id}_ is already used in the database: OK')
        print("Wiki initialization...")
        print("\tCopying wiki folder")
        cmd = f'cp -r {wiki_template} {wiki_path}'
        subprocess.call(cmd, shell=True)
        localSettings_path = os.path.join(wiki_path, 'LocalSettings.php')
        print("\tUpdating var in LocalSettings.php")
        print(f"\tSetting wiki host url to {wiki_host}")
        wiki_host_for_cmd = wiki_host.replace("/", "\/")
        cmd = f"sed -i 's/$wgServer =.*/$wgServer = \"{wiki_host_for_cmd}\";/' {localSettings_path}"
        subprocess.call(cmd, shell=True)
        print(f"\tSetting wiki id to {wiki_id}")
        cmd = f"sed -i 's/$wgScriptPath =.*/$wgScriptPath = \"\/{wiki_id}\";/' {localSettings_path}"
        subprocess.call(cmd, shell=True)
        cmd = f"sed -i 's/$wgDBprefix =.*/$wgDBprefix = \"{wiki_id}_\";/' {localSettings_path}"
        subprocess.call(cmd, shell=True)
        print(f"\tSetting database host {db_host}")
        cmd = f"sed -i 's/$wgDBserver =.*/$wgDBserver = \"{db_host}\";/' {localSettings_path}"
        subprocess.call(cmd, shell=True)
        print(f"\tSetting database name {db_name}")
        cmd = f"sed -i 's/$wgDBname =.*/$wgDBname = \"{db_name}\";/' {localSettings_path}"
        subprocess.call(cmd, shell=True)
        print(f"\tSetting database user {db_user}")
        cmd = f"sed -i 's/$wgDBuser =.*/$wgDBuser = \"{db_user}\";/' {localSettings_path}"
        subprocess.call(cmd, shell=True)
        print("\tSetting database password")
        cmd = f"sed -i 's/$wgDBpassword =.*/$wgDBpassword = \"{db_pwd}\";/' {localSettings_path}"
        subprocess.call(cmd, shell=True)
        config_url = f'{wiki_host}/{wiki_id}/mw-config/index.php'
        main_url = f'{wiki_host}/{wiki_id}/index.php/Main_Page'
        print("\n")
        print("##############################################################")
        print("MANUAL SETUP IS NOW REQUIRED. Access to this link from your browser:")
        print(f"\t{config_url}")
        print("Follow this instructions to setup mediawiki:")
        print("Language:")
        print("\tContinue->")
        print("Existing wiki:")
        print("\tUpgrade key: 62763ed4b27d11fc")
        print("\tContinue->")
        print("Welcome to MediaWiki!:")
        print("\tContinue->")
        print("Database settings:")
        print("\tContinue->")
        print("Name:")
        print("\tName of wiki: metabolic_network")
        print("\tAdministrator account: /!\ Use exactly the same to allow the bot to upload the pages automatically")
        print("\t\tYour username: admin")
        print("\t\tPassword: 123456789")
        print("\tI'm bored already, just install the wiki.")
        print("\tContinue->")
        print("Install:")
        print("\tContinue->")
        print("\tContinue->")
        print("\tDo not save the LocalSettings file")
        print("##############################################################")
        input("When the previous setup is done, press enter to continue...")
        print("\tRunning update.php")
        update_path = os.path.join(wiki_path, 'maintenance/update.php')
        cmd = f'php {update_path}'
        subprocess.call(cmd, shell=True)
        print("Importings manual curation forms")
        importImg_path = os.path.join(wiki_path, 'maintenance/importImages.php')
        cmd = f'php {importImg_path} --extensions=csv /home/forms/'
        subprocess.call(cmd, shell=True)
        print("The wiki is now online and reachable at this link:")
        print(f'\t{main_url}')
        print("You have now to select the folder containing the wiki pages you want to upload on this wiki")
        print("Ex: wiki --id=my_wiki --update=/shared/my_run/analysis/wiki_pages/draft/")

    elif args["--id"]:
        wiki_id = args["--id"]
        wiki_path = os.path.join(wiki_folders, wiki_id)
        if args["--remove"]:
            print(f'Removing wiki {wiki_id}')
            if os.path.exists(wiki_path):
                print("Removing wiki folder")
                shutil.rmtree(wiki_path)
            else:
                print(f'No folder {wiki_path} found')
            try:
                get_all_tables = f'{db_alias} -D {db_name} -e "show tables" -s | egrep "^{wiki_id}_"'
                all_tables = subprocess.check_output(["/bin/bash", "-i", "-c", get_all_tables])
                all_tables = str(all_tables, 'utf-8', 'ignore').splitlines()
                print("%s tables to drop" %len(all_tables))
                cmd = f'{db_alias} -D {db_name} -e "DROP TABLE '+",".join(all_tables)+'"'
                subprocess.call(["/bin/bash", "-i", "-c",cmd])
            except subprocess.CalledProcessError:
                print(f'No tables with prefix {wiki_id}_ found')
        elif args["--clean"]:
            try:
                get_all_tables = f'{db_alias} -D {db_name} -e "show tables" -s | egrep "^{wiki_id}_"'
                all_tables = subprocess.check_output(["/bin/bash", "-i", "-c",get_all_tables])
                all_tables = str(all_tables, 'utf-8', 'ignore').splitlines()
                if wiki_id+"_page" in all_tables:
                    print(f'{wiki_id}_page table to empty')
                    cmd = f'{db_alias} -D {db_name} -e "truncate table {wiki_id}_page"'
                    subprocess.call(["/bin/bash", "-i", "-c",cmd])
            except subprocess.CalledProcessError:
                print("No tables with prefix %s_ found" %wiki_id)
            
    elif args["--all"]:
        print("All deployed wiki:")
        for i in os.walk(wiki_folders).next()[1]:
            print("\t"+i)



if __name__ == "__main__":
    main()
